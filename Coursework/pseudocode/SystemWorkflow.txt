SYSTEM WORKFLOW EXPLANATION
=========================

WHEN YOU START THE PROGRAM (BookstoreUI.java):
-------------------------------------------
1. The system creates an empty queue to store orders
   CODE:
   ```java
   private static Queue<Order> orderQueue = new Queue<>();
   ```
   Syntax explained:
   - private static: Makes this variable belong to the class and be accessible in all methods
   - Queue<Order>: Creates a queue that can only store Order objects
   - orderQueue: The name we give to our queue
   - new Queue<>(): Creates a new empty queue in the computer's memory

2. The system shows you this menu
   CODE:
   ```java
   private static void showMenu() {
       System.out.println("========= Bookstore Order Processing System =========");
       System.out.println("1. Place a New Order");
       System.out.println("2. View All Orders");
       System.out.println("3. Search Order by Order ID");
       System.out.println("4. Exit");
       System.out.println("=======================================================");
   }
   ```
   Syntax explained:
   - private static void: Creates a method (a block of code) that doesn't return anything
   - showMenu(): The name of the method
   - System.out.println(): Displays text on the screen and moves to the next line

EXAMPLE WORKFLOW 1: PLACING A NEW ORDER
------------------------------------
Let's say you choose option 1 (Place a New Order):

1. System asks for customer name
   CODE:
   ```java
   System.out.print("Enter customer name: ");
   String customerName = scanner.nextLine();
   if (customerName.trim().isEmpty()) {
       System.out.println("Customer name cannot be empty.");
       return;
   }
   ```
   Syntax explained:
   - String customerName: Creates a text variable called customerName
   - scanner.nextLine(): Reads what you type and stores it in customerName
   - customerName.trim(): Removes spaces from the beginning and end of what you typed
   - isEmpty(): Checks if there's any text left after removing spaces
   - if (...): Only runs the code inside { } if the condition is true
   - return: Exits the method if the name is empty

2. System asks for shipping address
   CODE:
   ```java
   System.out.print("Enter shipping address: ");
   String shippingAddress = scanner.nextLine();
   if (shippingAddress.trim().isEmpty()) {
       System.out.println("Shipping address cannot be empty.");
       return;
   }
   ```
   Syntax explained:
   - Similar to the name example, but creates a shippingAddress variable instead
   - return: Stops the ordering process if address is empty

3. System asks for number of books
   CODE:
   ```java
   System.out.print("Enter number of books in the order: ");
   int numBooks = Integer.parseInt(scanner.nextLine());
   if (numBooks <= 0) {
       System.out.println("Number of books should be at least 1.");
       return;
   }
   ```
   Syntax explained:
   - int numBooks: Creates a number variable called numBooks
   - Integer.parseInt(): Converts text to a whole number
   - scanner.nextLine(): Gets what you typed as text
   - numBooks <= 0: Checks if the number is 0 or negative
   - return: Stops the process if the number isn't positive

4. For each book, system collects details
   CODE:
   ```java
   Book[] books = new Book[numBooks];
   for (int i = 0; i < numBooks; i++) {
       System.out.print("Enter title for book " + (i + 1) + ": ");
       String title = scanner.nextLine();
       if (title.trim().isEmpty()) {
           System.out.println("Book title cannot be empty.");
           return;
       }
       System.out.print("Enter quantity for book " + (i + 1) + ": ");
       int quantity = Integer.parseInt(scanner.nextLine());
       if (quantity <= 0) {
           System.out.println("Book quantity must be a positive integer.");
           return;
       }
       books[i] = new Book(title, quantity);
   }
   ```
   Syntax explained:
   - Book[] books: Creates a bookshelf (array) to hold multiple Book objects
   - new Book[numBooks]: Makes space for exactly numBooks books
   - for (int i = 0; i < numBooks; i++): Repeats the code inside for each book
   - i: A counter that starts at 0 and increases by 1 each time
   - books[i]: Refers to a specific slot in the bookshelf (slot 0, 1, 2, etc.)
   - new Book(title, quantity): Creates a new Book with the title and quantity you entered

5. System sorts the books and creates the order
   CODE:
   ```java
   // Sort books alphabetically
   InsertionSorter.sort(books);
   
   // Create and store the order
   Order newOrder = new Order(customerName, shippingAddress, books);
   orderQueue.enqueue(newOrder);
   System.out.println("Order placed successfully! Order ID: " + newOrder.getOrderId());
   ```
   Syntax explained:
   - InsertionSorter.sort(books): Calls our sorting method to arrange books alphabetically
   - Order newOrder: Creates a variable to hold the new order
   - new Order(...): Creates a new order with customer details and books
   - orderQueue.enqueue(newOrder): Adds the order to the back of the queue
   - newOrder.getOrderId(): Gets the ID number assigned to this order

EXAMPLE WORKFLOW 2: VIEWING ALL ORDERS
-----------------------------------
When you choose option 2 (View All Orders):

CODE:
```java
private static void viewOrders() {
    Object[] orders = orderQueue.toArray();
    if (orders.length == 0) {
        System.out.println("No orders available.");
        return;
    }
    System.out.println("----- All Orders -----");
    for (Object obj : orders) {
        Order order = (Order) obj;
        System.out.println(order);
        System.out.println("----------------------");
    }
}
```
Syntax explained:
- Object[] orders: Creates an array to hold all orders from the queue
- orderQueue.toArray(): Gets all orders from the queue as an array
- orders.length: Gives the number of orders in the array
- if (orders.length == 0): Checks if there are no orders
- for (Object obj : orders): Loops through each order in the array
- Order order = (Order) obj: Converts the Object to an Order
- System.out.println(order): Prints the order details (uses the toString method)

EXAMPLE WORKFLOW 3: SEARCHING FOR AN ORDER
---------------------------------------
When you choose option 3 (Search Order by Order ID):

CODE:
```java
private static void searchOrder(Scanner scanner) {
    try {
        System.out.print("Enter Order ID to search: ");
        int orderId = Integer.parseInt(scanner.nextLine());
        
        // Create dummy order for searching
        Order searchDummy = new Order(orderId);
        
        // Get all orders and search
        Object[] orders = orderQueue.toArray();
        int index = LinearSearcher.search(orders, searchDummy);
        
        if (index != -1) {
            Order foundOrder = (Order) orders[index];
            System.out.println("Order found:");
            System.out.println(foundOrder);
        } else {
            System.out.println("Order with ID " + orderId + " not found.");
        }
    } catch (Exception e) {
        System.out.println("Error searching for order: " + e.getMessage());
    }
}
```
Syntax explained:
- try { ... }: Wraps code that might cause errors so we can handle them
- int orderId: Creates a variable to store the ID number
- Order searchDummy: Creates a partial order with just the ID for comparison
- Object[] orders: Gets all orders from the queue as an array
- LinearSearcher.search(): Checks each order to find a matching ID
- index: The position of the found order (-1 if not found)
- if (index != -1): Checks if an order was found
- Order foundOrder = (Order) orders[index]: Gets the found order from the array
- catch (Exception e): Catches any errors that happened during the search

ERROR HANDLING EXAMPLES
---------------------
The system protects against many types of mistakes:

CODE:
```java
catch (NumberFormatException e) {
    System.out.println("Input format error: " + e.getMessage());
}
catch (Exception e) {
    System.out.println("Error placing order: " + e.getMessage());
}
```
Syntax explained:
- catch: Captures errors that happen in the try block
- NumberFormatException: A specific type of error when text can't be converted to numbers
- Exception: Catches any other errors that might happen
- e.getMessage(): Gets the error message to show to the user

EXITING THE PROGRAM
-----------------
When you choose option 4:

CODE:
```java
case "4":
    exit = true;
    System.out.println("Exiting the system. Goodbye!");
    break;
```
Syntax explained:
- exit = true: Changes the exit variable to true, which will end the program loop
- break: Exits the switch statement

Remember: Your orders are not saved permanently!
When you close and restart the program, it starts fresh with an empty queue. 