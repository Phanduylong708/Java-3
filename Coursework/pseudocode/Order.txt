ORDER CLASS EXPLANATION
====================

// This pseudocode explains the Order class in simple terms with syntax details.

CLASS Order:
    // 'PRIVATE STATIC orderCounter = 1'
    // - 'PRIVATE': The variable is only accessible within this class.
    // - 'STATIC': It belongs to the class itself, not to individual Order instances.
    // - 'orderCounter': A counter to assign unique IDs to orders, starting at 1.
    PRIVATE STATIC orderCounter = 1    // Starts counting from 1

    // These are the properties (attributes) every order has:
    // - 'orderId': A unique number for this order.
    // - 'customerName': The name of the customer who placed the order.
    // - 'shippingAddress': The delivery address for the order.
    // - 'books': An array to hold multiple Book objects associated with the order.
    PRIVATE orderId: Integer           // A unique number for this order
    PRIVATE customerName: String       // Who placed the order
    PRIVATE shippingAddress: String    // Where to deliver the order
    PRIVATE books: Array of Book       // List of books in this order

    // Main constructor - used when creating a new complete order
    // Syntax: 'CONSTRUCTOR Order(parameters):' defines a method that sets up a new Order object.
    CONSTRUCTOR Order(customerName: String, shippingAddress: String, books: Array of Book):
        // 'this.orderId = orderCounter' assigns the current order counter to this order's ID
        this.orderId = orderCounter        // Assign the next available order number
        // 'orderCounter = orderCounter + 1' increments the counter for the next order
        orderCounter = orderCounter + 1    // Increase the counter for the next order
        // 'this.customerName = customerName' saves the provided customer name
        this.customerName = customerName   // Save the customer's name
        // 'this.shippingAddress = shippingAddress' saves the provided shipping address
        this.shippingAddress = shippingAddress  // Save the delivery address
        // 'this.books = books' stores the array of Book objects into the order
        this.books = books                 // Save the list of books

    // Simple constructor - used when searching for an order by its ID
    // It only sets the orderId, leaving other properties undefined
    CONSTRUCTOR Order(orderId: Integer):
        this.orderId = orderId            // Only set the order ID
        // Other fields remain empty since this constructor is for search purposes

    // Getter methods: allow other parts of the code to read order details without modifying them.
    METHOD getOrderId() RETURNS Integer:
        RETURN orderId

    METHOD getCustomerName() RETURNS String:
        RETURN customerName

    METHOD getShippingAddress() RETURNS String:
        RETURN shippingAddress

    METHOD getBooks() RETURNS Array of Book:
        RETURN books

    // The equals method helps decide if two orders are considered the same.
    // We compare their orderId because each order is unique.
    METHOD equals(obj: Object) RETURNS Boolean:
        IF obj IS this THEN:              // If comparing an order with itself
            RETURN true                    // They're definitely the same
        IF obj IS NULL OR obj IS NOT an Order THEN:  // If obj is missing or not an Order
            RETURN false                   // They can't be the same
        other = (Order) obj               // Convert obj to an Order type
        RETURN this.orderId EQUALS other.orderId  // Compare order IDs for equality

    // The toString method explains how to convert an Order into a text string for display.
    METHOD toString() RETURNS String:
        // 'NEW StringBuilder()' creates an object to build a string efficiently
        result = NEW StringBuilder()       // Create a string builder for efficiency
        result.append("Order ID: ").append(orderId).append("\n")
        result.append("Customer Name: ").append(customerName).append("\n")
        result.append("Shipping Address: ").append(shippingAddress).append("\n")
        result.append("Books:\n")
        IF books IS NOT NULL THEN:
            FOR EACH book IN books:
                // Append each book's details; 'book.toString()' gets its text representation
                result.append(" - ").append(book.toString()).append("\n")
        ELSE:
            result.append(" No books in order.\n")
        RETURN result.toString()

END CLASS

EXPLANATION OF USAGE:
-------------------
1. Creating a new complete order:
   Example:
   books = [Book("Java Programming", 2), Book("Python Basics", 1)]
   order = NEW Order("John Doe", "123 Main St", books)
   // This creates an order with a unique ID, customer details, and a list of books

2. Creating a dummy order for searching purposes:
   searchOrder = NEW Order(5)  // Only the order ID is set; used for comparison

3. Getting order details using getter methods:
   id = order.getOrderId()           // Returns the unique order ID
   name = order.getCustomerName()    // Returns the customer's name
   address = order.getShippingAddress()  // Returns the shipping address
   bookList = order.getBooks()       // Returns the array of books

4. Printing an order:
   print(order)  // Internally calls toString() to show formatted order details 